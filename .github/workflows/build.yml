name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git \
          python3-pip \
          openjdk-17-jdk \
          unzip \
          wget \
          cython3 \
          libffi-dev \
          libssl-dev \
          build-essential \
          autoconf \
          libtool \
          pkg-config \
          zlib1g-dev \
          libbz2-dev \
          liblzma-dev \
          libsqlite3-dev \
          libreadline-dev \
          libncurses5-dev \
          libncursesw5-dev \
          xz-utils \
          tk-dev \
          libgdbm-dev \
          libc6-dev \
          libffi-dev \
          curl \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev \
          libportmidi-dev \
          libswscale-dev \
          libavformat-dev \
          libavcodec-dev \
          libjpeg-dev \
          libtiff5-dev \
          libx11-dev \
          libgtk-3-dev \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer kivy==2.3.1

    - name: Install project dependencies
      run: |
        pip install matplotlib numpy pandas openpyxl weasyprint plyer

    - name: Configure Git (required for buildozer)
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"

    - name: Set up Android SDK
      run: |
        # Set environment variables
        export ANDROID_SDK_ROOT=$HOME/android-sdk
        export ANDROID_NDK_ROOT=$HOME/android-ndk
        export PATH=$PATH:$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/build-tools

        # Create Android SDK directory
        mkdir -p $ANDROID_SDK_ROOT
        mkdir -p $ANDROID_NDK_ROOT

        # Download and install Android SDK command line tools
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O /tmp/cmdline-tools.zip
        unzip -q /tmp/cmdline-tools.zip -d /tmp/
        mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
        mv /tmp/cmdline-tools $ANDROID_SDK_ROOT/cmdline-tools/latest

        # Create the legacy tools directory structure that buildozer expects
        mkdir -p $ANDROID_SDK_ROOT/tools/bin
        cp -r $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/* $ANDROID_SDK_ROOT/tools/bin/ 2>/dev/null || true
        cp -r $ANDROID_SDK_ROOT/cmdline-tools/latest/lib/* $ANDROID_SDK_ROOT/tools/lib/ 2>/dev/null || true

        # Set up SDK environment
        echo "export ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "export ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "export PATH=$PATH:$ANDROID_SDK_ROOT/tools/bin:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/build-tools" >> $GITHUB_ENV

        # Accept all Android SDK licenses
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses

        # Install required Android packages (without NDK - let buildozer handle it)
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --install 'platforms;android-31' 'build-tools;33.0.2' 'platform-tools'

        # Verify sdkmanager is available
        echo "=== SDK Manager Check ==="
        which sdkmanager || echo "sdkmanager not in PATH"
        ls -la $ANDROID_SDK_ROOT/tools/bin/sdkmanager || echo "sdkmanager not found in tools/bin"
        ls -la $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager || echo "sdkmanager not found in cmdline-tools"

        # Verify installation
        echo "=== Android SDK Structure ==="
        find $ANDROID_SDK_ROOT -maxdepth 2 -type d | head -20
        echo "=== Build Tools ==="
        ls -la $ANDROID_SDK_ROOT/build-tools/
        echo "=== Platform Tools ==="
        ls -la $ANDROID_SDK_ROOT/platform-tools/ || echo "Platform tools not found"

    - name: Build Android APK
      run: |
        # Set environment variables (same as setup step)
        export ANDROID_SDK_ROOT=$HOME/android-sdk
        export ANDROID_NDK_ROOT=$HOME/android-ndk
        export PATH=$PATH:$ANDROID_SDK_ROOT/tools/bin:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/build-tools

        # Install buildozer and dependencies
        pip install --upgrade buildozer kivy

        # Check buildozer version and available targets
        echo "=== Buildozer Info ==="
        buildozer --version
        buildozer --help | head -15

        # Verify SDK tools are accessible
        echo "=== SDK Tools Check ==="
        which sdkmanager || echo "sdkmanager not in PATH"
        ls -la $ANDROID_SDK_ROOT/tools/bin/ | head -10
        ls -la $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/ | head -10

        # Show current directory and files
        echo "=== Current Directory ==="
        pwd
        ls -la

        # Build debug APK with retry logic
        echo "=== Starting APK Build ==="
        for i in {1..3}; do
          echo "Build attempt $i/3"
          if buildozer android debug; then
            echo "‚úÖ Build successful!"
            break
          else
            echo "‚ùå Build attempt $i failed"
            if [ $i -eq 3 ]; then
              echo "‚ùå All build attempts failed"
              exit 1
            fi
            echo "‚è≥ Waiting 30 seconds before retry..."
            sleep 30
          fi
        done
      continue-on-error: false
      timeout-minutes: 75

    - name: List generated files
      run: |
        echo "=== Build Directory ==="
        ls -la .buildozer/
        echo "=== Bin Directory ==="
        ls -la bin/ || echo "Bin directory not found"

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: |
          bin/*.apk
          bin/*.aab
        retention-days: 30
        if-no-files-found: error

    - name: Upload build logs
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          .buildozer/android/platform/python-for-android/dist/*/build/**/*.log
          .buildozer/android/platform/build/**/*.log
        if-no-files-found: warn

    - name: Notify on success
      if: success()
      run: |
        echo "‚úÖ APK build completed successfully!"
        echo "üì± Download your APK from the 'android-apk' artifact above"